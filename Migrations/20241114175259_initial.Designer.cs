// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SoundUp;

#nullable disable

namespace SoundUp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241114175259_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BaseUserMusic", b =>
                {
                    b.Property<Guid>("FavoritesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WhoFavoritedId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoritesId", "WhoFavoritedId");

                    b.HasIndex("WhoFavoritedId");

                    b.ToTable("BaseUserMusic");
                });

            modelBuilder.Entity("MusicPlaylist", b =>
                {
                    b.Property<Guid>("MusicInPlaylistsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MusicListId")
                        .HasColumnType("uuid");

                    b.HasKey("MusicInPlaylistsId", "MusicListId");

                    b.HasIndex("MusicListId");

                    b.ToTable("MusicPlaylist");
                });

            modelBuilder.Entity("SoundUpRes.Models.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SoundUpRes.Models.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("Id");

                    b.ToTable("AllUsers");

                    b.HasDiscriminator<string>("UserType").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SoundUpRes.Models.Music", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("Audio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Music");
                });

            modelBuilder.Entity("SoundUpRes.Models.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("PlayLists");
                });

            modelBuilder.Entity("SoundUpRes.Models.User", b =>
                {
                    b.HasBaseType("SoundUpRes.Models.BaseUser");

                    b.HasDiscriminator().HasValue("DefaultUser");
                });

            modelBuilder.Entity("SoundUpRes.Models.UserAuthor", b =>
                {
                    b.HasBaseType("SoundUpRes.Models.BaseUser");

                    b.HasDiscriminator().HasValue("AuthorForMusic");
                });

            modelBuilder.Entity("BaseUserMusic", b =>
                {
                    b.HasOne("SoundUpRes.Models.Music", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundUpRes.Models.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("WhoFavoritedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicPlaylist", b =>
                {
                    b.HasOne("SoundUpRes.Models.Playlist", null)
                        .WithMany()
                        .HasForeignKey("MusicInPlaylistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundUpRes.Models.Music", null)
                        .WithMany()
                        .HasForeignKey("MusicListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoundUpRes.Models.Album", b =>
                {
                    b.HasOne("SoundUpRes.Models.UserAuthor", "Author")
                        .WithMany("Albums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SoundUpRes.Models.Music", b =>
                {
                    b.HasOne("SoundUpRes.Models.Album", "Album")
                        .WithMany("AlbumMusic")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoundUpRes.Models.UserAuthor", "Author")
                        .WithMany("CreatedMusics")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SoundUpRes.Models.Playlist", b =>
                {
                    b.HasOne("SoundUpRes.Models.BaseUser", "Creator")
                        .WithMany("Playlists")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("SoundUpRes.Models.Album", b =>
                {
                    b.Navigation("AlbumMusic");
                });

            modelBuilder.Entity("SoundUpRes.Models.BaseUser", b =>
                {
                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("SoundUpRes.Models.UserAuthor", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("CreatedMusics");
                });
#pragma warning restore 612, 618
        }
    }
}
